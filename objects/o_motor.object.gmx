<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tendencia1 = m_pliego;
tendencia2 = m_pliego;
tendencia3 = m_pliego;
relojtendencia = 0;

relojverificador = 0;
oleada = 0;
tramo = 100;
numbase = ceil(room_width * room_height * 0.0000008);
plus = round(sqrt((room_width * room_height) / 10513152));
intermitente = false;
ascenso = 0;

relojdibuja = 0;
depth = -room_height * 2;

//para poder hacer trampa usando el .ini
if !s_porlacopa1()
{
    ini_open("config.ini");
        if ini_key_exists("config", "oleada")
        {
            oleada = real(ini_read_string("config", "oleada", "0"));
        }
        else
        {
            ini_write_string("config", "oleada", "0");
        }
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    //tendencias de aparicion de clases en el juego caotico
    if o_game.opciones[opc_balanza] == 0
    {
        relojtendencia -= delta_time;
        if relojtendencia &lt;= 0
        {
            relojtendencia = 60000000 + irandom(60000000);
            tendencia1 = choose(m_pliego, m_decreto, m_hoja, m_basura,
                    m_avion, m_libro, m_folder, m_rollo);
            tendencia2 = choose(m_pliego, m_decreto, m_hoja, m_basura,
                    m_avion, m_libro, m_folder, m_rollo);
            tendencia3 = choose(m_pliego, m_decreto, m_hoja, m_basura,
                    m_avion, m_libro, m_folder, m_rollo);
        }
    }
    
    if o_game.enjuego
    {
        //cada tanto se verifica si hay nuevo nivel / oleada
        relojverificador -= delta_time;
        if relojverificador &lt;= 0
        {
            relojverificador = 25000000 + irandom(10000000);
            
            //crear cartas de poder
            if random(1) &lt;= 0.6
            {
                if (o_game.opciones[opc_balanza] == 0 and oleada &gt;= (8 - plus) - m_minusplus) or
                    (o_game.opciones[opc_balanza] == 1 and oleada &gt;= (6 - plus) - m_minusplus)
                {
                    var auz = instance_create(irandom(room_width),
                        irandom(room_height), o_cartapoder);
                    auz.reloj = m_timeobjeto * plus;
                    auz.clase = irandom(9);
                }
            }
            
            //crear ayuda guia e historia
            if random(1) &lt;= 0.3 and oleada &gt;= (7 - plus) - m_minusplus
            {
                var aus = instance_create(irandom(room_width),
                    irandom(room_height), o_guia);
                aus.reloj = m_timeobjeto * 2 * plus;
            }
            
            if o_game.enemigos &lt; numbase * 0.1 * plus and s_cuantoselite() == 0 and
                !instance_exists(o_bossroca)
            {
                //hay una nueva oleada
                relojdibuja = 3000000;
                s_masvida(1);
                with o_ficha
                {
                    if actor == -1
                    {
                        revivir = 1;
                    }
                }
                if o_game.opciones[opc_infinito] == 0
                {
                    with o_muerto
                    {
                        eterno = false;
                        reloj = clamp(reloj, 0, 3000000);
                    }
                }
                audio_play_sound(a_oleada, 100, false);
                s_savegame();
                
                do
                {
                    s_creapapeles(m_pliego);
                }
                until(o_game.enemigos &gt;= numbase);
                
                if o_game.opciones[opc_balanza] == 0
                {
                    //modalidad juego caotico
                    oleada++;
                    repeat ceil(oleada * numbase * m_dificil)
                    {
                        s_creapapeles(-1);
                    }
                    if oleada &gt;= (9 - plus) - m_minusplus
                    {
                        intermitente = !intermitente;
                        if intermitente
                        {
                            ascenso++;
                            repeat ascenso
                            {
                                s_ascender(-1);
                            }
                        }
                    }
                    if oleada &gt;= (12 - plus) - m_minusplus and frac(oleada /
                            (12 - plus) - m_minusplus) == 0
                    {
                        s_creabossroca();
                    }
                }
                else
                {
                    //modalidad juego equilibrado, oleadas segmentadas
                    tramo++;
                    if tramo &gt;= 4
                    {
                        tramo = 0;
                        oleada++;
                    }
                    switch tramo
                    {
                        case 0:
                            repeat ceil(oleada * numbase * m_dificil * 0.2)
                            {
                                s_creapapeles(m_pliego);
                            }
                            repeat ceil(oleada * numbase * m_dificil * 0.6)
                            {
                                s_creapapeles(m_hoja);
                            }
                            if oleada &gt;= (7 - plus) - m_minusplus
                            {
                                intermitente = !intermitente;
                                if intermitente
                                {
                                    ascenso++;
                                    repeat ascenso
                                    {
                                        s_ascender(m_hoja);
                                    }
                                }
                            }
                        break;
                        
                        case 1:
                            repeat ceil(oleada * numbase * m_dificil * 0.4)
                            {
                                s_creapapeles(m_basura);
                            }
                            repeat ceil(oleada * numbase * m_dificil * 0.3)
                            {
                                s_creapapeles(m_folder);
                            }
                            if oleada &gt;= (7 - plus) - m_minusplus
                            {
                                intermitente = !intermitente;
                                if intermitente
                                {
                                    ascenso++;
                                    repeat ascenso
                                    {
                                        s_ascender(choose(m_basura, m_folder));
                                    }
                                }
                            }
                        break;
                        
                        case 2:
                            repeat ceil(oleada * numbase * m_dificil * 0.5)
                            {
                                s_creapapeles(m_avion);
                            }
                            repeat ceil(oleada * numbase * m_dificil * 0.3)
                            {
                                s_creapapeles(m_decreto);
                            }
                            if oleada &gt;= (7 - plus) - m_minusplus
                            {
                                intermitente = !intermitente;
                                if intermitente
                                {
                                    ascenso++;
                                    repeat ascenso
                                    {
                                        s_ascender(choose(m_avion, m_decreto));
                                    }
                                }
                            }
                        break;
                        
                        case 3:
                            repeat ceil(oleada * numbase * m_dificil * 0.3)
                            {
                                s_creapapeles(m_rollo);
                            }
                            repeat ceil(oleada * numbase * m_dificil * 0.3)
                            {
                                s_creapapeles(m_libro);
                            }
                            if oleada &gt;= (7 - plus) - m_minusplus
                            {
                                intermitente = !intermitente;
                                if intermitente
                                {
                                    ascenso++;
                                    repeat ascenso
                                    {
                                        s_ascender(choose(m_rollo, m_libro));
                                    }
                                }
                            }
                            if oleada &gt;= (10 - plus) - m_minusplus and frac(oleada /
                                    (10 - plus) - m_minusplus) == 0
                            {
                                s_creabossroca();
                            }
                        break;
                    }
                }
            }
        }
    }
    
    if relojdibuja != 0
    {
        relojdibuja -= delta_time;
        if relojdibuja &lt;= 0
        {
            relojdibuja = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if relojdibuja != 0 or o_game.pausa
{
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    if o_game.opciones[opc_balanza] == 0
    {
        draw_text_transformed_colour(view_xview[0] + view_wview[0] * 0.5 + 7,
            view_yview[0] + view_hview[0]* 0.25, "lvl: " + string(oleada),
            6, 6, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(view_xview[0] + view_wview[0] * 0.5 - 7,
            view_yview[0] + view_hview[0]* 0.25, "lvl: " + string(oleada),
            6, 6, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(view_xview[0] + view_wview[0] * 0.5,
            view_yview[0] + view_hview[0]* 0.25, "lvl: " + string(oleada),
            6, 6, 0, c_black, c_black, c_black, c_black, 1);
    }
    else
    {
        draw_text_transformed_colour(view_xview[0] + view_wview[0] * 0.5 + 7,
            view_yview[0] + view_hview[0]* 0.25, "lvl: " + string(oleada) +
            " (" + string(tramo + 1) + "/4)",
            6, 6, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(view_xview[0] + view_wview[0] * 0.5 - 7,
            view_yview[0] + view_hview[0]* 0.25, "lvl: " + string(oleada) +
            " (" + string(tramo + 1) + "/4)",
            6, 6, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(view_xview[0] + view_wview[0] * 0.5,
            view_yview[0] + view_hview[0]* 0.25, "lvl: " + string(oleada) +
            " (" + string(tramo + 1) + "/4)",
            6, 6, 0, c_black, c_black, c_black, c_black, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
