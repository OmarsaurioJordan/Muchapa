<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>d_basem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oo_bloque</parentName>
  <maskName>d_basem</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>estado = estp_libre;
relojpoder = -irandom(1000000);
relojdisparo = 0;
poder = false;
reloj_errar = irandom(m_timeerrar * 2);
andar = choose(false, true);
direccion = irandom(359);

blanco = -1;
mma = true;
mxa = x;
mya = y;
mxb = x;
myb = y;
orix = 0;
oriy = 0;
reloj_jug = irandom(1000000);
reloj_proy = irandom(1000000);

anima = 0;
paso = 0;

mp_potential_settings(60, 30, 3, true);
depth = -y;

o_game.enemigos++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o_game.enemigos--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animaciones
anima += delta_time;
if anima &gt;= 100000
{
    anima -= 100000;
    paso++;
    if paso &gt; 3
    {
        paso = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///carga poder
if !o_game.pausa
{
    if !poder
    {
        relojpoder += delta_time;
        if relojpoder &gt;= m_podbossroca
        {
            relojpoder = -irandom(m_podbossroca * 0.2);
            poder = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IA
if !o_game.pausa
{
    //cambios movimiento errar
    reloj_errar -= delta_time;
    if reloj_errar &lt;= 0
    {
        reloj_errar = m_timeerrar + irandom(m_timeerrar);
        if andar
        {
            andar = choose(true, true, false);
            direccion += -45 + irandom(90);
        }
        else
        {
            andar = choose(false, false, false, true);
            direccion = irandom(359);
            if andar and choose(true, false)
            {
                s_buscameta(id);
            }
        }
    }
    
    //poder
    if poder and estado == estp_persigue and point_distance(x, y, mxa, mya) &lt;= m_vision * 0.6 and
        point_distance(x, y, mxa, mya) &gt;= m_vision * 0.4
    {
        poder = false;
        estado = estp_corre;
        var ddd = point_direction(x, y, mxa, mya) - 5 + irandom(10);
        mxa = x + lengthdir_x(10000, ddd);
        mya = y + lengthdir_y(10000, ddd);
        mxb = x;
        myb = y;
        audio_play_sound_at(a_roca, x, y, 0, ma_ref, ma_max, ma_fac, false, 45);
    }
    
    //disparo
    if relojdisparo &gt; 0
    {
        relojdisparo = clamp(relojdisparo - delta_time, 0, 100000000);
    }
    if relojdisparo == 0 and estado == estp_persigue and
        point_distance(x, y, mxa, mya) &lt;= m_vision and
        point_distance(x, y, mxa, mya) &gt;= m_vision * 0.5
    {
        relojdisparo = m_podbasura * 2;
        
        var auxx;
        var dirtot = point_direction(x, y, mxa, mya) - 10 + irandom(20);
        for (var i = 0; i &lt; 4; i++)
        {
            auxx = instance_create(x, y, o_piedrita);
            auxx.direccion = dirtot - 30 + i * 20;
        }
        audio_play_sound_at(a_bolita, x, y, 0, ma_ref, ma_max, ma_fac, false, 20);
    }
    
    //colision con muros
    var ai = true;
    var otro = instance_place(x, y, oo_bloque);
    if otro != noone
    {
        direction = point_direction(otro.x, otro.y, x, y);
        x += lengthdir_x(delta_time * m_velrebote, direction);
        y += lengthdir_y(delta_time * m_velrebote, direction);
        direccion = irandom(359);
        s_bossbuscajug(id, 5000000);
        ai = false;
    }
    
    //IA estados
    if ai { switch estado
    {
        case estp_libre:
            if andar
            {
                x += lengthdir_x(delta_time * m_velpaper * 0.6, direccion);
                y += lengthdir_y(delta_time * m_velpaper * 0.6, direccion);
            }
            s_bossbuscajug(id, 500000);
            if estado == estp_libre
            {
                s_bossbuscaproy(id, 2000000);
            }
        break;
        
        case estp_persigue:
            if instance_exists(blanco)
            {
                if collision_line(x, y, blanco.x, blanco.y, oo_bloque, true, true)
                {
                    estado = estp_rastrea;
                }
                else
                {
                    mxa = blanco.x;
                    mya = blanco.y;
                    mp_potential_step_object(mxa, mya, delta_time * m_velpaper * 0.7, oo_bloque);
                }
            }
            else
            {
                estado = estp_libre;
            }
            s_bossbuscajug(id, 3000000);
        break;
        
        case estp_rastrea:
            if point_distance(mxa, mya, x, y) &gt; 64 and
                !collision_line(x, y, mxa, mya, oo_bloque, true, true)
            {
                mp_potential_step_object(mxa, mya, delta_time * m_velpaper * 0.8, oo_bloque);
            }
            else
            {
                estado = estp_libre;
            }
            s_bossbuscajug(id, 250000);
        break;
        
        case estp_investiga:
            if mma
            {
                if point_distance(mxa, mya, x, y) &gt; 64 and
                    !collision_line(x, y, mxa, mya, oo_bloque, true, true)
                {
                    mp_potential_step_object(mxa, mya, delta_time * m_velpaper * 0.9, oo_bloque);
                }
                else
                {
                    mma = false;
                }
            }
            else
            {
                if point_distance(mxb, myb, x, y) &gt; 64 and
                    !collision_line(x, y, mxa, mya, oo_bloque, true, true)
                {
                    mp_potential_step_object(mxb, myb, delta_time * m_velpaper * 0.9, oo_bloque);
                }
                else
                {
                    estado = estp_libre;
                }
            }
            s_bossbuscajug(id, 250000);
        break;
        
        case estp_corre:
            if point_distance(mxb, myb, x, y) &gt; m_vision
            {
                estado = estp_libre;
            }
            else
            {
                direction = point_direction(x, y, mxa, mya);
                x += lengthdir_x(delta_time * m_velpaper * 2.5, direction);
                y += lengthdir_y(delta_time * m_velpaper * 2.5, direction);
                if place_meeting(x, y, oo_bloque)
                {
                    estado = estp_libre;
                }
                else if x &lt;= 144 or x &gt;= room_width - 144 or
                    y &lt;= 432 or y &gt;= room_height - 144
                {
                    estado = estp_libre;
                }
            }
        break;
    }}
    
    //limites mundo y profundidad dibujado
    var xvi = x;
    var yvi = y;
    x = clamp(x, 144, room_width - 144);
    y = clamp(y, 432, room_height - 144);
    if x != xvi or y != yvi
    {
        direccion = irandom(359);
    }
    depth = -y;
    
    //llegada a punto final
    if point_distance(x, y, orix, oriy) &lt; 96 and estado != estp_corre
    {
        instance_create(orix, oriy, o_muro);
        var aux = instance_create(x, y, o_papel);
        aux.clase = m_pliego;
        audio_play_sound_at(a_enroca, x, y, 0, ma_ref, ma_max, ma_fac, false, 45);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_sombra, 0, x, y);
if xprevious == x and yprevious == y
{
    draw_sprite(d_patotas, 0, x, y);
}
else
{
    draw_sprite(d_patotas, 1 + paso, x, y);
}
draw_sprite(d_bossroca, 0, x, y - 67);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
