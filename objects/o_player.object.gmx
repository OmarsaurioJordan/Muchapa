<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>d_baseu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oo_dibujable</parentName>
  <maskName>d_baseu</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>origen = -1; //la ficha que lo maneja
estado = estm_libre;
mifoco = -1;

anima = 0;
paso = 0;
ani1x = 0;
ani1y = 0;
sube1x = true;
sube1y = true;
ani2x = 0;
ani2y = 0;
sube2x = true;
sube2y = true;
ani3x = 0;
ani3y = 0;
sube3x = true;
sube3y = true;

golperojo = 0;
golpemele = 0;
invulnerable = m_timeinvulneranew;
votarllamas = 0;

depth = -y;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (o_game.opciones[opc_balanza] == 0 and o_motor.oleada &gt;= 16 - o_motor.plus) or
    (o_game.opciones[opc_balanza] == 1 and o_motor.oleada &gt;= 13 - o_motor.plus)
{
    switch origen.clase
    {
        case m_mele:
            origen.poder[3] = m_mpoder3;
        break;
        
        case m_dist:
            origen.poder[3] = m_dpoder3;
        break;
        
        case m_apoyo:
            origen.poder[3] = m_apoder3;
        break;
    }
}

if (o_game.opciones[opc_balanza] == 0 and o_motor.oleada &gt;= 12 - o_motor.plus) or
    (o_game.opciones[opc_balanza] == 1 and o_motor.oleada &gt;= 9 - o_motor.plus)
{
    switch origen.clase
    {
        case m_mele:
            origen.poder[2] = m_mpoder2;
        break;
        
        case m_dist:
            origen.poder[2] = m_dpoder2;
        break;
        
        case m_apoyo:
            origen.poder[2] = m_apoder2;
        break;
    }
}

if (o_game.opciones[opc_balanza] == 0 and o_motor.oleada &gt;= 9 - o_motor.plus) or
    (o_game.opciones[opc_balanza] == 1 and o_motor.oleada &gt;= 6 - o_motor.plus)
{
    if origen.clase == m_mele
    {
        origen.poder[1] = m_mpoder1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animaciones e impactos
anima += delta_time;
if anima &gt;= 100000
{
    anima -= 100000;
    //pies
    paso++;
    if paso &gt; 3
    {
        paso = 0;
    }
    //cabeza
    if sube1x
    {
        ani1x += random(3);
        if ani1x &gt; 4.5
        {
            sube1x = false;
        }
    }
    else
    {
        ani1x -= random(3);
        if ani1x &lt; -4.5
        {
            sube1x = true;
        }
    }
    if sube1y
    {
        ani1y += random(3);
        if ani1y &gt; 9
        {
            sube1y = false;
        }
    }
    else
    {
        ani1y -= random(3);
        if ani1y &lt; -4.5
        {
            sube1y = true;
        }
    }
    //brazo izq
    if sube2x
    {
        ani2x += random(3);
        if ani2x &gt; 3
        {
            sube2x = false;
        }
    }
    else
    {
        ani2x -= random(3);
        if ani2x &lt; -7.5
        {
            sube2x = true;
        }
    }
    if sube2y
    {
        ani2y += random(3);
        if ani2y &gt; 10.5
        {
            sube2y = false;
        }
    }
    else
    {
        ani2y -= random(3);
        if ani2y &lt; -6
        {
            sube2y = true;
        }
    }
    //brazo der
    if sube3x
    {
        ani3x += random(3);
        if ani3x &gt; 6
        {
            sube3x = false;
        }
    }
    else
    {
        ani3x -= random(3);
        if ani3x &lt; -6
        {
            sube3x = true;
        }
    }
    if sube3y
    {
        ani3y += random(3);
        if ani3y &gt; 10.5
        {
            sube3y = false;
        }
    }
    else
    {
        ani3y -= random(3);
        if ani3y &lt; -4.5
        {
            sube3y = true;
        }
    }
}

if !o_game.pausa
{
    //temporizadores varios
    if golperojo != 0
    {
        golperojo = clamp(golperojo - delta_time, 0, 1000000);
    }
    if golpemele != 0
    {
        golpemele = clamp(golpemele - delta_time, 0, 1000000);
    }
    if invulnerable != 0
    {
        invulnerable = clamp(invulnerable - delta_time, 0, 100000000);
    }
    
    //impacto con bolita
    var otro = instance_place(x, y, o_bolita);
    if otro != noone
    {
        if origen.clase == m_mele and (estado == estm_escut or estado == estm_escus or
            random(1) &lt;= 0.4)
        {
            otro.direccion = point_direction(x, y, otro.x, otro.y);
            otro.mortal = false;
            audio_play_sound_at(a_bolipush, x, y, 0, ma_ref, ma_max, ma_fac, false, 5);
        }
        else if origen.clase == m_apoyo and estado == esta_inmola
        {
            with otro
            {
                instance_destroy();
            }
        }
        else if otro.mortal and invulnerable == 0
        {
            origen.vida = clamp(origen.vida - m_bolitazo * otro.elite, 0, 10000);
            with otro
            {
                instance_destroy();
            }
            if origen.vida == 0
            {
                s_asesinato(id);
            }
            else
            {
                s_audiogolpe(x, y);
                golperojo = m_golperojo;
            }
        }
    }
    
    //impacto con piedrita
    var otro = instance_place(x, y, o_piedrita);
    if otro != noone
    {
        if origen.clase == m_mele and (estado == estm_escut or estado == estm_escus)
        {
            otro.direccion = point_direction(x, y, otro.x, otro.y);
            audio_play_sound_at(a_bolipush, x, y, 0, ma_ref, ma_max, ma_fac, false, 5);
        }
        if invulnerable == 0
        {
            origen.vida = clamp(origen.vida - m_bolitazo * 4, 0, 10000);
            with otro
            {
                instance_destroy();
            }
            if origen.vida == 0
            {
                s_asesinato(id);
            }
            else
            {
                s_audiogolpe(x, y);
                golperojo = m_golperojo;
            }
        }
    }
    
    //colision con papel
    otro = collision_circle(x, y, 32, o_papel, true, true);
    if otro != noone
    {
        if invulnerable == 0 and !(origen.clase == m_apoyo and estado == esta_inmola and
            collision_circle(x, y, m_maxfoco * 3, o_antorcha, true, true))
        {
            if origen.clase == m_mele and (estado == estm_escut or
                estado == estm_escus)
            {
                origen.vida = clamp(origen.vida - s_golpepaper(otro.clase) * otro.elite * 0.3,
                    0, 10000);
            }
            else
            {
                origen.vida = clamp(origen.vida - s_golpepaper(otro.clase) * otro.elite,
                    0, 10000);
            }
            s_muertep(otro, mu_explo);
            if origen.vida == 0
            {
                s_asesinato(id);
            }
            else
            {
                s_audiogolpe(x, y);
                golperojo = m_golperojo;
            }
        }
    }
    
    //colision con boss roca
    otro = collision_circle(x, y, 32, o_bossroca, true, true);
    if otro != noone
    {
        if invulnerable == 0
        {
            if !(origen.clase == m_mele and (estado == estm_escut or
                estado == estm_escus))
            {
                s_asesinato(id);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mele
if !o_game.pausa and origen.clase == m_mele
{
    switch estado
    {
        case estm_libre:
            s_mueveplayer(id, m_velplayer * 1.1);
            if keyboard_check(s_gamepad(pad_poder0, origen.jugador)) and origen.poder[0] == m_mpoder0
            {
                estado = estm_golpe;
                golpemele = m_animagolpe;
                origen.poder[0] = 0;
                s_golpeapapel(id);
            }
            else if keyboard_check(s_gamepad(pad_poder1, origen.jugador)) and origen.poder[1] == m_mpoder1
            {
                estado = estm_multi;
                golpemele = m_animagolpe;
                origen.poder[1] = 0;
                s_golpeavarios(id);
                //poder con agua del apoyo
                var miid = id;
                var conteo = 0;
                var auz;
                with o_agua
                {
                    if collision_circle(miid.x, miid.y, 128, id, true, false) and
                        point_distance(x, y, xstart, ystart) &lt;= m_maxfoco * 2
                    {
                        if !collision_line(miid.x, miid.y, x, y, oo_bloque, true, true)
                        {
                            repeat 4
                            {
                                conteo++;
                                auz = instance_create(miid.x, miid.y, o_agua);
                                auz.origen = origen;
                                auz.reloj = m_timeagua * 0.75;
                                auz.hiper = true;
                            }
                            instance_destroy();
                        }
                    }
                }
                if conteo &gt; 0
                {
                    origen.poder[1] = m_mpoder1 * 0.5;
                    o_game.ajuda[2]++;
                    auz = 360 / conteo;
                    var j = irandom(359);
                    with o_agua
                    {
                        if xstart == miid.x and ystart == miid.y
                        {
                            direccion = j;
                            j += auz;
                        }
                    }
                }
            }
            else if keyboard_check(s_gamepad(pad_poder2, origen.jugador)) and origen.poder[2] &gt;= m_mpoder2 * 0.5
            {
                votarllamas += delta_time;
                if votarllamas &gt;= 200000
                {
                    estado = estm_escut;
                }
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder3, origen.jugador)) and origen.poder[3] == m_mpoder3
            {
                estado = estm_lanza;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
            }
        break;
        
        case estm_sint:
            s_mueveplayer(id, m_velplayer * 1.2);
            if keyboard_check_pressed(s_gamepad(pad_poder2, origen.jugador)) and origen.poder[2] &gt;= m_mpoder2 * 0.5
            {
                estado = estm_escus;
            }
        break;
        
        case estm_golpe:
        case estm_multi:
            if golpemele == 0
            {
                votarllamas = 0;
                estado = estm_libre;
            }
        break;
        
        case estm_escut:
        case estm_escus:
            s_mueveplayer(id, m_velplayer * 0.8);
            origen.poder[2] = clamp(origen.poder[2] - delta_time * (1 + m_mpoder2 / m_mescudo),
                0, m_mpoder2);
            if keyboard_check_released(s_gamepad(pad_poder2, origen.jugador)) or origen.poder[2] == 0
            {
                votarllamas = 0;
                if estado == estm_escus
                {
                    estado = estm_sint;
                }
                else
                {
                    estado = estm_libre;
                }
            }
        break;
        
        case estm_lanza:
            if keyboard_check_released(s_gamepad(pad_poder3, origen.jugador))
            {
                if !s_combaso(x, y)
                {
                    estado = estm_sint;
                    origen.poder[3] = 0;
                    var aux = instance_create(x, y, o_tijerasgo);
                    aux.origen = origen;
                    aux.direction = point_direction(x, y, mifoco.x, mifoco.y);
                    audio_play_sound_at(a_filoaire, x, y, 0, ma_ref, ma_max, ma_fac, false, 50);
                    with mifoco
                    {
                        instance_destroy();
                    }
                }
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dist
if !o_game.pausa and origen.clase == m_dist
{
    switch estado
    {
        case estd_libre:
            s_mueveplayer(id, m_velplayer * 1.2);
            if keyboard_check_pressed(s_gamepad(pad_poder0, origen.jugador))
            {
                origen.poder[0] = clamp(origen.poder[0], 0, m_dpoder0 * 0.75);
                estado = estd_metralla;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder1, origen.jugador)) and origen.poder[1] == m_dpoder1
            {
                estado = estd_sniper;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder2, origen.jugador)) and origen.poder[2] == m_dpoder2
            {
                origen.poder[2] = 0;
                audio_play_sound_at(a_esquirlas, x, y, 0, ma_ref, ma_max, ma_fac, false, 50);
                var aux;
                for (var i = 0; i &lt; 360; i += 22.5)
                {
                    aux = instance_create(x, y, o_cuchilla);
                    aux.origen = origen;
                    aux.direccion = i;
                    aux.reloj = m_timecuchilla * 0.5;
                }
                //poder en conjunto con apoyo inmolado
                var ela = collision_circle(x, y, m_maxfoco, o_player, true, true);
                if ela != noone
                {
                    if ela.origen.clase == m_apoyo and ela.estado == esta_inmola
                    {
                        o_game.ajuda[1]++;
                        var xxx, yyy, freni;
                        repeat ceil(ela.origen.poder[2] / (m_apoder2 * 0.05)) * 3
                        {
                            freni = 0;
                            do
                            {
                                xxx = x - m_vision * 0.75 + irandom(m_vision * 1.5);
                                yyy = y - m_vision * 0.75 + irandom(m_vision * 1.5);
                                freni++;
                            }
                            until point_distance(x, y, xxx, yyy) &lt;= m_vision * 0.75 and
                                !collision_line(x, y, xxx, yyy, oo_bloque, true, true) and
                                ((!collision_circle(xxx, yyy, m_maxfoco * 0.5, o_antorcha, true, true) and
                                point_distance(x, y, xxx, yyy) &gt;= m_maxfoco) or freni &gt; 20);
                            aux = instance_create(xxx, yyy, o_antorcha);
                            aux.origen = ela.origen;
                        }
                        ela.origen.poder[2] = clamp(ela.origen.poder[2], 0, m_apoder2 * 0.5);
                        ela.estado = esta_libre;
                    }
                }
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder3, origen.jugador)) and origen.poder[3] == m_dpoder3
            {
                estado = estd_bazooka;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
            }
        break;
        
        case estd_metralla:
            if origen.poder[0] == m_dpoder0
            {
                origen.poder[0] = 0;
                var aux = instance_create(x, y, o_cuchilla);
                aux.origen = origen;
                aux.direccion = point_direction(x, y, mifoco.x, mifoco.y) - 5 + irandom(10);
                audio_play_sound_at(a_cuchiaire, x, y, 0, ma_ref, ma_max, ma_fac, false, 20);
                //poder en conjunto con mele
                var elm = collision_circle(x + lengthdir_x(m_maxfoco * 0.5, aux.direccion),
                    y + lengthdir_y(m_maxfoco * 0.5, aux.direccion), m_maxfoco * 0.5,
                    o_player, true, true);
                if elm != noone
                {
                    if elm.origen.clase == m_mele and (elm.estado == estm_escut or
                        elm.estado == estm_escus) and abs(angle_difference(aux.direccion,
                        point_direction(x, y, elm.x, elm.y))) &lt;= 30
                    {
                        o_game.ajuda[0]++;
                        aux.sniper = m_sniper;
                        origen.poder[0] = m_dpoder0 * 0.5;
                        elm.origen.poder[2] = clamp(elm.origen.poder[2] +
                            (m_dpoder0 * 0.5) * (m_mpoder2 / m_mescudo) * 0.5, 0, m_mpoder2);
                    }
                }
            }
            if keyboard_check_released(s_gamepad(pad_poder0, origen.jugador))
            {
                estado = estd_libre;
                with mifoco
                {
                    instance_destroy();
                }
            }
        break;
        
        case estd_sniper:
            if keyboard_check_released(s_gamepad(pad_poder1, origen.jugador))
            {
                estado = estd_libre;
                origen.poder[1] = 0;
                var aux = instance_create(x, y, o_cuchilla);
                aux.origen = origen;
                aux.sniper = m_sniper;
                aux.direccion = point_direction(x, y, mifoco.x, mifoco.y);
                audio_play_sound_at(a_cuchiaire, x, y, 0, ma_ref, ma_max, ma_fac, false, 20);
                with mifoco
                {
                    instance_destroy();
                }
            }
        break;
        
        case estd_bazooka:
            if keyboard_check_released(s_gamepad(pad_poder3, origen.jugador))
            {
                if !s_combaso(x, y)
                {
                    origen.poder[3] = 0;
                    estado = estd_libre;
                    var aux = instance_create(x, y, o_explosivo);
                    aux.origen = origen;
                    aux.direccion = point_direction(x, y, mifoco.x, mifoco.y);
                    audio_play_sound_at(a_cuchiplus, x, y, 0, ma_ref, ma_max, ma_fac, false, 20);
                    with mifoco
                    {
                        instance_destroy();
                    }
                }
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///apoyo
if !o_game.pausa and origen.clase == m_apoyo
{
    switch estado
    {
        case esta_libre:
            s_mueveplayer(id, m_velplayer * 1.2);
            if keyboard_check_pressed(s_gamepad(pad_poder0, origen.jugador))
            {
                origen.poder[0] = m_apoder0 * 0.75;
                estado = esta_rafaga;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder1, origen.jugador)) and origen.poder[1] == m_apoder1
            {
                estado = esta_shotgun;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder2, origen.jugador)) and origen.poder[2] &gt;= m_apoder2
            {
                estado = esta_inmola;
                votarllamas = 0;
            }
            else if keyboard_check_pressed(s_gamepad(pad_poder3, origen.jugador)) and origen.poder[3] == m_apoder3
            {
                estado = esta_howitzer;
                mifoco = instance_create(x, y, o_foco);
                mifoco.invocador = id;
                mifoco.altorango = m_altrangfoc / m_maxfoco;
            }
        break;
        
        case esta_rafaga:
            if origen.poder[0] == m_apoder0
            {
                origen.poder[0] = 0;
                var aux = instance_create(x, y, o_agua);
                aux.origen = origen;
                aux.direccion = point_direction(x, y, mifoco.x, mifoco.y) - 10 + irandom(20);
                aux = audio_play_sound_at(a_burbujas, x, y, 0, ma_ref, ma_max, ma_fac, false, 5);
                audio_sound_gain(aux, 0.25, 0);
            }
            if keyboard_check_released(s_gamepad(pad_poder0, origen.jugador))
            {
                estado = esta_libre;
                with mifoco
                {
                    instance_destroy();
                }
            }
        break;
        
        case esta_shotgun:
            if keyboard_check_released(s_gamepad(pad_poder1, origen.jugador))
            {
                estado = esta_libre;
                origen.poder[1] = 0;
                var aux;
                var dirtt = point_direction(x, y, mifoco.x, mifoco.y);
                for (var i = 0; i &lt;= 45; i += 5)
                {
                    aux = instance_create(x, y, o_agua);
                    aux.origen = origen;
                    aux.reloj = m_timeagua * 0.75;
                    aux.direccion = dirtt - 22.5 + i;
                }
                audio_play_sound_at(a_burbujas, x, y, 0, ma_ref, ma_max, ma_fac, false, 50);
                with mifoco
                {
                    instance_destroy();
                }
                //habilidad de ver las cartas de poderes en el mapa
                if instance_exists(o_cartapoder)
                {
                    aux = instance_create(x, y, o_orbe);
                    aux.direccion = dirtt;
                    aux.blanco = instance_nearest(x, y, o_cartapoder);
                }
            }
        break;
        
        case esta_inmola:
            s_mueveplayer(id, m_velplayer * 1.4);
            origen.poder[2] = clamp(origen.poder[2] - delta_time, 0, m_apoder2);
            votarllamas += delta_time;
            if votarllamas &gt;= 250000
            {
                votarllamas -= 250000;
                var aux = instance_create(x + 9, y + 9, o_antorcha);
                aux.origen = origen;
                origen.poder[2] = clamp(origen.poder[2] - m_apoder2 * 0.05, 0, m_apoder2);
            }
            if origen.poder[2] == 0
            {
                estado = esta_libre;
            }
        break;
        
        case esta_howitzer:
            if keyboard_check_released(s_gamepad(pad_poder3, origen.jugador))
            {
                if !s_combaso(x, y)
                {
                    if point_distance(x, y, mifoco.x, mifoco.y) &gt;= m_maxfoco * 2.5
                    {
                        origen.poder[3] = 0;
                        var aux = instance_create(x, y, o_fuego);
                        aux.origen = origen;
                        aux.metax = mifoco.x;
                        aux.metay = mifoco.y;
                        audio_play_sound_at(a_fuego, x, y, 0, ma_ref, ma_max, ma_fac, false, 50);
                    }
                    estado = esta_libre;
                    with mifoco
                    {
                        instance_destroy();
                    }
                }
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mele
if origen.clase == m_mele and (invulnerable == 0 or paso &gt; 1)
{
    draw_sprite(d_sombra, 0, x, y);
    
    var ccc = c_white;
    if golperojo != 0
    {
        ccc = c_mirojo;
    }
    
    //golpe vision trasera
    if estado == estm_golpe
    {
        var ang = s_angulo8(direction);
        switch origen.jugador
        {
            case m_rojo:
                draw_sprite(d_impacto0, 1 + ang, x, y - 123); break;
            case m_azul:
                draw_sprite(d_impacto1, 1 + ang, x, y - 123); break;
            case m_verde:
                draw_sprite(d_impacto2, 1 + ang, x, y - 123); break;
            case m_amarillo:
                draw_sprite(d_impacto3, 1 + ang, x, y - 123); break;
        }
    }
    else if estado == estm_multi
    {
        switch origen.jugador
        {
            case m_rojo:
                draw_sprite(d_impacto0, 0, x, y - 123); break;
            case m_azul:
                draw_sprite(d_impacto1, 0, x, y - 123); break;
            case m_verde:
                draw_sprite(d_impacto2, 0, x, y - 123); break;
            case m_amarillo:
                draw_sprite(d_impacto3, 0, x, y - 123); break;
        }
    }
    
    //cuerpo y pies
    if xprevious == x and yprevious == y
    {
        draw_sprite_ext(d_cuerpo, 1, x, y, 1, 1, 0, ccc, 1);
    }
    else
    {
        draw_sprite_ext(d_cuerpo, 2 + paso, x, y, 1, 1, 0, ccc, 1);
    }
    
    //tijeras en mano
    if estado == estm_libre or estado == estm_escut or estado = estm_lanza
    {
        if origen.poder[1] == m_mpoder1
        {
            draw_sprite_ext(d_mele, 12, x + 72 + ani3x, y - 126 + ani3y, 1, 1, 0, c_white, 1);
        }
        draw_sprite_ext(d_mele, origen.jugador, x + 72 + ani3x, y - 126 + ani3y, 1, 1, 0, ccc, 1);
    }
    
    //cabeza
    if ccc == c_mirojo
    {
        if o_game.reloj_invisible != 0
        {
            draw_sprite_ext(d_cabeza, 14, x + ani1x, y - 162 + ani1y, 1.2, 1.2, 0, ccc, 1);
        }
        else
        {
            draw_sprite_ext(d_cabeza, origen.jugador, x + ani1x, y - 162 + ani1y, 1.2, 1.2, 0, ccc, 1);
        }
    }
    else
    {
        if o_game.reloj_invisible != 0
        {
            draw_sprite(d_cabeza, 14, x + ani1x, y - 162 + ani1y);
        }
        else
        {
            draw_sprite(d_cabeza, origen.jugador, x + ani1x, y - 162 + ani1y);
        }
    }
    
    //escudo
    if estado == estm_escut or estado == estm_escus
    {
        draw_sprite_ext(d_mele, 8 + origen.jugador, x + ani2x, y - 120 + ani2y, 1, 1, 0, ccc, 1);
    }
    else
    {
        draw_sprite_ext(d_mele, 4 + origen.jugador, x - 30 + ani2x, y - 90 + ani2y, 1, 1, 0, ccc, 1);
    }
    
    //golpe vision frontal
    if estado == estm_golpe
    {
        switch origen.jugador
        {
            case m_rojo:
                draw_sprite(d_impacto0, 10 + ang, x, y - 123); break;
            case m_azul:
                draw_sprite(d_impacto1, 10 + ang, x, y - 123); break;
            case m_verde:
                draw_sprite(d_impacto2, 10 + ang, x, y - 123); break;
            case m_amarillo:
                draw_sprite(d_impacto3, 10 + ang, x, y - 123); break;
        }
    }
    else if estado == estm_multi
    {
        switch origen.jugador
        {
            case m_rojo:
                draw_sprite(d_impacto0, 9, x, y - 123); break;
            case m_azul:
                draw_sprite(d_impacto1, 9, x, y - 123); break;
            case m_verde:
                draw_sprite(d_impacto2, 9, x, y - 123); break;
            case m_amarillo:
                draw_sprite(d_impacto3, 9, x, y - 123); break;
        }
    }
    
    //dibujar vida
    if o_game.displei &gt;= 1
    {
        draw_rectangle_colour(x - 48, y - 250, x + 48, y - 260,
            c_gray, c_gray, c_gray, c_gray, false);
        switch origen.jugador
        {
            case m_rojo:
                ccc = c_red; break;
            
            case m_azul:
                ccc = c_azulado; break;
            
            case m_verde:
                ccc = c_lime; break;
            
            case m_amarillo:
                ccc = c_yellow; break;
        }
        draw_rectangle_colour(x - 48, y - 250, x - 48 + (origen.vida / m_mvida) * 96, y - 260,
            ccc, ccc, ccc, ccc, false);
    }
    
    //dibujar poderes
    if o_game.displei == 3
    {
        if origen.poder[2] == m_mpoder2
        {
            draw_rectangle_colour(x - 30, y - 235, x - 10, y - 245,
                c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        }
        else if origen.poder[2] &gt;= m_mpoder2 * 0.5
        {
            draw_rectangle_colour(x - 30, y - 235, x - 10, y - 245,
                c_gray, c_gray, c_gray, c_gray, false);
        }
        if origen.poder[3] == m_mpoder3
        {
            draw_rectangle_colour(x + 10, y - 235, x + 30, y - 245,
                c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false);
        }
    }
    
    //dibujar nombre
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(x + 6, y - 265, origen.nombre, 3, 3, 0,
        c_white, c_white, c_white, c_white, 1);
    draw_text_transformed_colour(x - 6, y - 265, origen.nombre, 3, 3, 0,
        c_white, c_white, c_white, c_white, 1);
    draw_text_transformed_colour(x, y - 265, origen.nombre, 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dist
if origen.clase == m_dist and (invulnerable == 0 or paso &gt; 1)
{
    draw_sprite(d_sombra, 0, x, y);
    
    var ccc = c_white;
    if golperojo != 0
    {
        ccc = c_mirojo;
    }
    
    //municion en espalda trasera
    draw_sprite_ext(d_distancia, 4 + origen.jugador, x - 6, y - 120, 1, 1, 0, ccc, 1);
    
    //cuerpo y pies
    if xprevious == x and yprevious == y
    {
        draw_sprite_ext(d_cuerpo, 1, x, y, 1, 1, 0, ccc, 1);
    }
    else
    {
        draw_sprite_ext(d_cuerpo, 2 + paso, x, y, 1, 1, 0, ccc, 1);
    }
    
    //municion en espalda frontal
    draw_sprite_ext(d_distancia, 8 + origen.jugador, x - 6, y - 120, 1, 1, 0, ccc, 1);
    
    //cuchillas metralla
    if origen.poder[0] == m_dpoder0
    {
        draw_sprite_ext(d_distancia, origen.jugador, x + 60 + ani3x, y - 126 + ani3y, 1, 1, 0, ccc, 1);
    }
    
    //cabeza
    if ccc == c_mirojo
    {
        if o_game.reloj_invisible != 0
        {
            draw_sprite_ext(d_cabeza, 14, x + ani1x, y - 162 + ani1y, 1.2, 1.2, 0, ccc, 1);
        }
        else
        {
            draw_sprite_ext(d_cabeza, 4 + origen.jugador, x + ani1x, y - 162 + ani1y, 1.2, 1.2, 0, ccc, 1);
        }
    }
    else
    {
        if o_game.reloj_invisible != 0
        {
            draw_sprite(d_cabeza, 14, x + ani1x, y - 162 + ani1y);
        }
        else
        {
            draw_sprite(d_cabeza, 4 + origen.jugador, x + ani1x, y - 162 + ani1y);
        }
    }
    
    //cuchillas sniper
    if origen.poder[1] == m_dpoder1
    {
        draw_sprite_ext(d_distancia, origen.jugador, x - 30 + ani2x, y - 90 + ani2y, 1, 1, 0, ccc, 1);
    }
    
    //dibujar vida
    if o_game.displei &gt;= 1
    {
        draw_rectangle_colour(x - 48, y - 250, x + 48, y - 260,
            c_gray, c_gray, c_gray, c_gray, false);
        switch origen.jugador
        {
            case m_rojo:
                ccc = c_red; break;
            
            case m_azul:
                ccc = c_azulado; break;
            
            case m_verde:
                ccc = c_lime; break;
            
            case m_amarillo:
                ccc = c_yellow; break;
        }
        draw_rectangle_colour(x - 48, y - 250, x - 48 + (origen.vida / m_dvida) * 96, y - 260,
            ccc, ccc, ccc, ccc, false);
    }
    
    //dibujar poderes
    if o_game.displei == 3
    {
        if origen.poder[2] == m_dpoder2
        {
            draw_rectangle_colour(x - 30, y - 235, x - 10, y - 245,
                c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        }
        if origen.poder[3] == m_dpoder3
        {
            draw_rectangle_colour(x + 10, y - 235, x + 30, y - 245,
                c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false);
        }
    }
    
    //dibujar nombre
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(x + 6, y - 265, origen.nombre, 3, 3, 0,
        c_white, c_white, c_white, c_white, 1);
    draw_text_transformed_colour(x - 6, y - 265, origen.nombre, 3, 3, 0,
        c_white, c_white, c_white, c_white, 1);
    draw_text_transformed_colour(x, y - 265, origen.nombre, 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///apoyo
if origen.clase == m_apoyo and (invulnerable == 0 or paso &gt; 1)
{
    draw_sprite(d_sombra, 0, x, y);
    
    var ccc = c_white;
    if golperojo != 0
    {
        ccc = c_mirojo;
    }
    
    //encendedor en espalda trasera
    if estado == esta_libre or estado == esta_rafaga or estado == esta_shotgun
    {
        draw_sprite_ext(d_apoyo, 8 + origen.jugador, x - 9, y - 120, 1, 1, 0, ccc, 1);
    }
    
    //cuerpo y pies
    if xprevious == x and yprevious == y
    {
        draw_sprite_ext(d_cuerpo, 1, x, y, 1, 1, 0, ccc, 1);
    }
    else
    {
        draw_sprite_ext(d_cuerpo, 2 + paso, x, y, 1, 1, 0, ccc, 1);
    }
    
    //encendedor en espalda frontal
    if estado == esta_libre or estado == esta_rafaga or estado == esta_shotgun
    {
        draw_sprite_ext(d_apoyo, 12 + origen.jugador, x - 9, y - 120, 1, 1, 0, ccc, 1);
    }
    
    //cabeza
    if ccc == c_mirojo
    {
        if o_game.reloj_invisible != 0
        {
            draw_sprite_ext(d_cabeza, 14, x + ani1x, y - 162 + ani1y, 1.2, 1.2, 0, ccc, 1);
        }
        else
        {
            draw_sprite_ext(d_cabeza, 8 + origen.jugador, x + ani1x, y - 162 + ani1y, 1.2, 1.2, 0, ccc, 1);
        }
    }
    else
    {
        if o_game.reloj_invisible != 0
        {
            draw_sprite(d_cabeza, 14, x + ani1x, y - 162 + ani1y);
        }
        else
        {
            draw_sprite(d_cabeza, 8 + origen.jugador, x + ani1x, y - 162 + ani1y);
        }
    }
    
    //gotero
    draw_sprite_ext(d_apoyo, origen.jugador, x + ani3x, y - 108 + ani3y, 1, 1, 0, ccc, 1);
    if origen.poder[1] == m_apoder1 and estado != esta_inmola and estado != esta_howitzer
    {
        draw_sprite(d_cuchilla, 8, x + 60 + ani3x, y - 168 + ani3y);
    }
    
    //encendedor frontal
    if estado == esta_inmola or estado == esta_howitzer
    {
        draw_sprite_ext(d_apoyo, 4 + origen.jugador, x + 45 + ani2x, y - 120 + ani2y, 1, 1, 0, ccc, 1);
    }
    
    //dibujar vida
    if o_game.displei &gt;= 1
    {
        draw_rectangle_colour(x - 48, y - 250, x + 48, y - 260,
            c_gray, c_gray, c_gray, c_gray, false);
        switch origen.jugador
        {
            case m_rojo:
                ccc = c_red; break;
            
            case m_azul:
                ccc = c_azulado; break;
            
            case m_verde:
                ccc = c_lime; break;
            
            case m_amarillo:
                ccc = c_yellow; break;
        }
        draw_rectangle_colour(x - 48, y - 250, x - 48 + (origen.vida / m_avida) * 96, y - 260,
            ccc, ccc, ccc, ccc, false);
    }
    
    //dibujar poderes
    if o_game.displei == 3
    {
        if origen.poder[2] == m_apoder2
        {
            draw_rectangle_colour(x - 30, y - 235, x - 10, y - 245,
                c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        }
        if origen.poder[3] == m_apoder3
        {
            draw_rectangle_colour(x + 10, y - 235, x + 30, y - 245,
                c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false);
        }
    }
    
    //dibujar nombre
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(x + 6, y - 265, origen.nombre, 3, 3, 0,
        c_white, c_white, c_white, c_white, 1);
    draw_text_transformed_colour(x - 6, y - 265, origen.nombre, 3, 3, 0,
        c_white, c_white, c_white, c_white, 1);
    draw_text_transformed_colour(x, y - 265, origen.nombre, 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
