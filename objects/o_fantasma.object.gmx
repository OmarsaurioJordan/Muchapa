<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oo_enemy</parentName>
  <maskName>d_baseu</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invocador = -1;
reloj_errar = irandom(m_timeerrar * 2);
andar = choose(false, true);
direccion = irandom(359);
estado = estp_libre;
reloj = m_timefanta * o_motor.plus;
elite = 1;

blanco = -1;
mxa = x;
mya = y;
reloj_jug = irandom(1000000);

anima = 0;
paso = 0;
alfa = 0.9;

mp_potential_settings(60, 30, 1, true);
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animaciones
anima += delta_time;
if anima &gt;= 100000
{
    anima -= 100000;
    paso++;
    if paso &gt; 3
    {
        paso = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IA
if !o_game.pausa
{
    //cambios movimiento errar
    reloj_errar -= delta_time;
    if reloj_errar &lt;= 0
    {
        reloj_errar = m_timeerrar + irandom(m_timeerrar);
        if andar
        {
            andar = choose(true, true, false);
            direccion += -45 + irandom(90);
        }
        else
        {
            andar = choose(false, false, false, true);
            direccion = irandom(359);
        }
    }
    
    //tiempo vida y formas de muerte
    reloj -= delta_time;
    if reloj &lt;= 0
    {
        s_finfanta(id);
    }
    else if !instance_exists(invocador)
    {
        s_finfanta(id);
    }
    else
    {
        var el = collision_circle(x, y, 64, o_player, true, true);
        if el != noone
        {
            if alfa == 0.5
            {
                s_menospoder(el.origen, 0.1);
            }
            else
            {
                s_menospoder(el.origen, 0.2);
            }
            s_finfanta(id);
        }
    }
    
    //cambio transparencia
    if collision_circle(x, y, 64, oo_proyectil, true, true) or
        collision_circle(x, y, m_hullefuego * 0.5, o_antorcha, true, true)
    {
        alfa = 0.5;
    }
    
    //colision con muros
    var ai = true;
    var otro = instance_place(x, y, oo_bloque);
    if otro != noone
    {
        direction = point_direction(otro.x, otro.y, x, y);
        x += lengthdir_x(delta_time * m_velrebote, direction);
        y += lengthdir_y(delta_time * m_velrebote, direction);
        direccion = irandom(359);
        s_buscajugador(id, 2000000);
        ai = false;
    }
    else
    {
        //colision con otros tipos
        otro = instance_place(x, y, oo_enemy);
        if otro != noone
        {
            direction = point_direction(otro.x, otro.y, x, y);
            x += lengthdir_x(delta_time * m_velrebote, direction);
            y += lengthdir_y(delta_time * m_velrebote, direction);
        }
    }
    if ai { switch estado //IA estados
    {
        case estp_libre:
            if andar
            {
                x += lengthdir_x(delta_time * o_game.velpaper[m_hoja], direccion);
                y += lengthdir_y(delta_time * o_game.velpaper[m_hoja], direccion);
            }
            s_buscajugador(id, 2000000);
        break;
        
        case estp_persigue:
            if instance_exists(blanco)
            {
                if point_distance(x, y, blanco.x, blanco.y) &gt; m_vision
                    or collision_line(x, y, blanco.x, blanco.y, oo_bloque, true, true)
                {
                    estado = estp_rastrea;
                }
                else
                {
                    mxa = blanco.x;
                    mya = blanco.y;
                    mp_potential_step_object(mxa, mya, delta_time * o_game.velpaper[m_hoja], oo_bloque);
                }
            }
            else
            {
                estado = estp_libre;
            }
            s_buscajugador(id, 6000000);
        break;
        
        case estp_rastrea:
            if point_distance(mxa, mya, x, y) &gt; 64 and
                !collision_line(x, y, mxa, mya, oo_bloque, true, true)
            {
                mp_potential_step_object(mxa, mya, delta_time * o_game.velpaper[m_hoja], oo_bloque);
            }
            else
            {
                estado = estp_libre;
            }
            s_buscajugador(id, 1000000);
        break;
    }}
    
    //limites mundo y profundidad dibujado
    var xvi = x;
    var yvi = y;
    x = clamp(x, 144, room_width - 144);
    y = clamp(y, 432, room_height - 144);
    if x != xvi or y != yvi
    {
        direccion = irandom(359);
    }
    depth = -y;
    
    //colision con agua
    otro = instance_place(x, y, o_agua);
    if otro != noone
    {
        with otro
        {
            instance_destroy();
        }
    }
    
    //colision con fuego
    if collision_circle(x, y, m_hullefuego * 0.6, o_antorcha, true, true)
    {
        s_finfanta(id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(d_sombra, 0, x, y, 1, 1, 0, c_white, alfa);
if elite != 1
{
    draw_sprite_ext(d_elite, m_hoja, x, y - 67, 1, 1, 0, c_white, alfa);
}
if xprevious == x and yprevious == y
{
    draw_sprite_ext(d_patas, m_hoja * 6, x, y, 1, 1, 0, c_white, alfa);
}
else
{
    draw_sprite_ext(d_patas, m_hoja * 6 + 1 + paso, x, y, 1, 1, 0, c_white, alfa);
}
draw_sprite_ext(d_papel, m_hoja, x, y - 67, 1, 1, 0, c_white, alfa);

//dibujar vida y calor
if o_game.displei &gt;= 2
{
    draw_set_alpha(alfa);
    draw_rectangle_colour(x - 48, y - 240, x + 48, y - 250,
        c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false);
    draw_set_alpha(1);
}
if o_game.displei == 3
{
    draw_set_alpha(alfa);
    draw_rectangle_colour(x - 32, y - 230, x + 32, y - 240,
        c_gray, c_gray, c_gray, c_gray, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
