<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_leeopciones(id);
pausa = false;
enjuego = true;
reloj = 0;
segundos = 0;
minutos = 0;
puntos = 0;
enemigos = 0;
caidos = 0;

reloj_invisible = 0;
reloj_hielo = 0;

depth = -(room_height + 10) * 2;
alarm[0] = room_speed * 15;
pantallanegra = -1;
intermitent = 0;

if instance_exists(o_meta)
{
    var uno = instance_find(o_meta, irandom(instance_number(o_meta) - 1));
    instance_create(uno.x, uno.y, o_camara);
}
else
{
    instance_create(room_width * 0.5, room_height * 0.5, o_camara);
}

audio_listener_orientation(0, 0, 10000, 0, -1, 0);

ini_open("config.ini");
    sonido = real(ini_read_string("config", "sonido", "2"));
    s_sonido(sonido);
    
    displei = real(ini_read_string("config", "display", "3"));
    
    var aux, val, frr;
    for (var i = 0; i &lt; 4; i++)
    {
        val = real(ini_read_string("jugadores", "ju" + string(i), "1"));
        if val &gt; 3 or val &lt; 0
        {
            vacio[i] = true;
        }
        else
        {
            vacio[i] = false;
            if val == 3
            {
                frr = 0;
                do
                {
                    val = irandom(2);
                    frr++;
                    with o_ficha
                    {
                        if clase == val
                        {
                            val = -1;
                            break;
                        }
                    }
                }
                until val != -1 or frr &gt; 20;
                if val == -1
                {
                    val = irandom(2);
                }
            }
            aux = instance_create(0, 0, o_ficha);
            aux.jugador = i;
            aux.nombre = ini_read_string("nombres", "n" + string(i), "");
            aux.clase = val;
        }
    }
ini_close();
nivel = instance_number(o_ficha);

for (var i = 0; i &lt; 9; i++)
{
    vidap[i] = s_vidapaper(i);
    calormax[i] = s_vidapaper(i) * 0.5;
    velpaper[i] = s_velpaper(i);
}

instance_create(0, 0, o_motor);

alarm[2] = 1;
alarm[3] = 2;
alarm[4] = 1;

//para las ayudas guias
ajuda[0] = 0; //mele y distancia
ajuda[1] = 0; //distancia y apoyo
ajuda[2] = 0; //apoyo y mele
ajuda[3] = 0; //mele, distancia y apoyo
ajuda[4] = 0; //tomar poder
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_mapa_fotico(string_delete(room_get_name(room), 1, 2), true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with o_muro
{
    if place_meeting(x, y, oo_bloque)
    {
        instance_destroy();
    }
}
with o_muro
{
    mask_index = d_basemm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with o_muro
{
    mask_index = d_basem;
}
with o_decorado
{
    if !collision_circle(x, y, 96, oo_bloque, true, true)
    {
        tile_add(dd_decorado, 0, 0, 96, 96, x - 48, y - 52, -y);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(a_lose, 100, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomizar
randomize();
if random(1) &lt;= 0.25
{
    audio_play_sound_at(a_viento, irandom(room_width), irandom(room_height), 0,
        ma_ref * 0.5, ma_max * 2, ma_fac, false, 0);
}
alarm[0] = room_speed * 10 + irandom(room_speed * 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_anykey)
{
    switch keyboard_key
    {
        case vk_escape: //salir al menu principal
            s_salirjuego(id);
        break;
        
        case vk_f4: //poner o quitar pantalla completa
            s_cambiofullscreen();
        break;
        
        case vk_tab: //pausar juego
            pausa = !pausa;
        break;
        
        case vk_f10: //mostrar vidas de jugadores o papeles
            displei++;
            if displei &gt; 3
            {
                displei = 0;
            }
            ini_open("config.ini");
            ini_write_string("config", "display", string(displei));
            ini_close();
        break;
        
        case vk_f12:
            s_foto();
        break;
        
        case ord('L'): //cambiar sonido
            sonido++;
            if sonido &gt; 2
            {
                sonido = 0;
            }
            s_sonido(sonido);
            ini_open("config.ini");
            ini_write_string("config", "sonido", string(sonido));
            ini_close();
        break;
    }
}

if !pausa and enjuego
{
    //tiempo de juego
    reloj += delta_time;
    if reloj &gt;= 1000000
    {
        reloj -= 1000000;
        segundos++;
        if segundos &gt;= 60
        {
            segundos = 0;
            minutos++;
        }
    }
    
    //temporizadores de poderes globales
    if reloj_invisible != 0
    {
        reloj_invisible = clamp(reloj_invisible - delta_time, 0, 100000000);
    }
    if reloj_hielo != 0
    {
        reloj_hielo = clamp(reloj_hielo - delta_time, 0, 100000000);
    }
}

//dibujar o no las cosas
var x1 = view_xview[0] - 144;
var x2 = view_xview[0] + view_wview[0] + 144;
var y1 = view_yview[0] - 144;
var y2 = view_yview[0] + view_hview[0] + 432;
with oo_dibujable
{
    if x &gt;= x1 and x &lt;= x2 and y &gt;= y1 and y &lt;= y2
    {
        visible = true;
    }
    else
    {
        visible = false;
    }
}

//temporizador pantalla negra para salir
if pantallanegra != -1
{
    pantallanegra -= delta_time;
    if pantallanegra &lt;= 0
    {
        pantallanegra = -1;
    }
}

//intermitencia mostrar tiempo o enemigos
intermitent += delta_time;
if intermitent &gt;= 4000000
{
    intermitent -= 4000000;
}

audio_listener_position(view_xview[0] + view_wview[0] * 0.5,
    view_yview[0] + view_hview[0] * 0.5, -360);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0];
y = view_yview[0];

var xx, yy;
xx = x + view_wview[0] * 0.5;
yy = y + view_hview[0];
draw_set_valign(fa_middle);
draw_set_halign(fa_left);

//dibujar puntos en general acumulados o numero de muertos
draw_sprite(d_gui0a, 0, xx, y);
if intermitent &lt;= 2000000
{
    draw_sprite(d_inguia, 1, xx - 180, y + 30);
    draw_text_transformed_colour(xx - 60, y + 30, string(round(puntos)), 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}
else
{
    draw_sprite(d_inguia, 3, xx - 180, y + 30);
    draw_text_transformed_colour(xx - 60, y + 30, string(caidos), 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}

//dibujar tiempo transcurrido o numero de enemigos
draw_sprite(d_gui0b, 0, xx, yy);
if intermitent &lt;= 2000000
{
    draw_sprite(d_inguia, 0, xx - 180, yy - 30);
    draw_text_transformed_colour(xx - 30, yy - 30, string(minutos) + ":" + string(segundos), 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}
else
{
    draw_sprite(d_inguia, 2, xx - 180, yy - 30);
    draw_text_transformed_colour(xx - 30, yy - 30, string(enemigos), 3, 3, 0,
        c_black, c_black, c_black, c_black, 1);
}

//dibujar fichas sin jugador
for (var i = 0; i &lt; 4; i++)
{
    if vacio[i]
    {
        switch i
        {
            case m_rojo:
                draw_sprite(d_gui1, 1, x, y); break;
            case m_azul:
                draw_sprite(d_gui2, 1, x + view_wview[0], y); break;
            case m_verde:
                draw_sprite(d_gui3, 1, x, y + view_hview[0]); break;
            case m_amarillo:
                draw_sprite(d_gui4, 1, x + view_wview[0], y + view_hview[0]); break;
        }
    }
}

//dibujar pantalla oscura
if pantallanegra != -1
{
    draw_set_alpha(0.5);
    draw_rectangle_colour(view_xview[0], view_yview[0], view_xview[0] + view_wview[0],
        view_yview[0] + view_hview[0], c_black, c_black, c_black, c_black, false);
    draw_set_alpha(1);
}

//dibujar pausa
if pausa
{
    draw_sprite(d_pausa, 0, xx, y + view_hview[0] * 0.5);
}

//dibujar coordenadas del mouse
/*
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_text_colour(mouse_x, mouse_y, "x:" + string(mouse_x - x) + "#y:" + string(mouse_y - y),
    c_black, c_black, c_black, c_black, 1);
draw_sprite(d_mouse, 0, mouse_x, mouse_y);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
