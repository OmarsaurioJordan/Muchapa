<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clase = m_dist;
jugador = m_rojo;
nombre = "";
vida = 0;
puntos = 0;
poder[0] = 0;
poder[1] = 0;
poder[2] = 0;
poder[3] = 0;
revivir = -1; //temporizador crear nuevo actor
actor = -1;
depth = -room_height * 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///crea nuevo jugador
var xx, yy;
var freno = 0;
do
{
    xx = o_camara.x - m_vision * 0.25 + irandom(m_vision * 0.5);
    yy = o_camara.y + 108 - m_vision * 0.25 + irandom(m_vision * 0.5);
    freno++;
}
until !collision_line(xx, yy, o_camara.x, o_camara.y + 108, oo_bloque, true, true) or freno &gt; 20;
actor = instance_create(xx, yy, o_player);
actor.origen = id;
audio_play_sound_at(a_new, xx, yy, 0, ma_ref, ma_max, ma_fac, false, 90);
switch clase
{
    case m_mele:
        vida = m_mvida; break;
    case m_dist:
        vida = m_dvida; break;
    case m_apoyo:
        vida = m_avida; break;
}
poder[0] = 0;
poder[1] = 0;
poder[2] = 0;
poder[3] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//temporizadores poderes y vida
if !o_game.pausa
{
    if actor != -1 and instance_exists(actor)
    {
        var aura = 1;
        if collision_circle(actor.x, actor.y, m_auravida, o_auravida, true, true)
        {
            aura = 4;
        }
        
        switch clase
        {
            case m_mele:
                poder[0] = clamp(poder[0] + delta_time, 0, m_mpoder0);
                poder[1] = clamp(poder[1] + delta_time, 0, m_mpoder1);
                poder[2] = clamp(poder[2] + delta_time, 0, m_mpoder2);
                vida = clamp(vida + delta_time * m_regenera * aura, 0, m_mvida);
            break;
            
            case m_dist:
                poder[0] = clamp(poder[0] + delta_time, 0, m_dpoder0);
                poder[1] = clamp(poder[1] + delta_time, 0, m_dpoder1);
                poder[2] = clamp(poder[2] + delta_time, 0, m_dpoder2);
                vida = clamp(vida + delta_time * m_regenera * aura, 0, m_dvida);
            break;
            
            case m_apoyo:
                poder[0] = clamp(poder[0] + delta_time, 0, m_apoder0);
                poder[1] = clamp(poder[1] + delta_time, 0, m_apoder1);
                poder[2] = clamp(poder[2] + delta_time, 0, m_apoder2);
                vida = clamp(vida + delta_time * m_regenera * aura, 0, m_avida);
            break;
        }
    }
    
    if revivir != -1
    {
        revivir -= delta_time;
        if revivir &lt;= 0
        {
            revivir = -1;
            alarm[0] = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch jugador
{
    case m_rojo:
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        x = view_xview[0];
        y = view_yview[0];
        draw_sprite(d_gui1, 0, x, y);
        draw_text_transformed_colour(x + 285, y + 228, string(round(puntos)), 3, 3, 0,
            c_black, c_black, c_black, c_black, 1);
        if actor == -1
        {
            draw_sprite(d_guicabeza, 12, x + 135, y + 231);
            if revivir != -1
            {
                draw_text_transformed_colour(x + 285, y + 108, string(ceil(revivir / 1000000)),
                    6, 6, 0, c_black, c_black, c_black, c_black, 1);
            }
        }
        else
        {
            switch clase
            {
                case m_mele:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x + 135, y + 231, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_mvida), 1);
                    draw_sprite(d_inguib, 0, x + 285, y + 48);
                    draw_sprite(d_inguib, 0, x + 285, y + 108);
                    draw_sprite(d_inguib, 0, x + 285, y + 168);
                    draw_sprite_ext(d_inguib, 1, x + 285, y + 48, poder[1] / m_mpoder1, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 2, x + 285, y + 108, poder[2] / m_mpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x + 285, y + 168, poder[3] / m_mpoder3, 1, 0, c_white, 1);
                break;
                
                case m_dist:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x + 135, y + 231, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_dvida), 1);
                    draw_sprite(d_inguib, 0, x + 285, y + 78);
                    draw_sprite(d_inguib, 0, x + 285, y + 138);
                    draw_sprite_ext(d_inguib, 2, x + 285, y + 78, poder[2] / m_dpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x + 285, y + 138, poder[3] / m_dpoder3, 1, 0, c_white, 1);
                break;
                
                case m_apoyo:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x + 135, y + 231, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_avida), 1);
                    draw_sprite(d_inguib, 0, x + 285, y + 78);
                    draw_sprite(d_inguib, 0, x + 285, y + 138);
                    draw_sprite_ext(d_inguib, 2, x + 285, y + 78, poder[2] / m_apoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x + 285, y + 138, poder[3] / m_apoder3, 1, 0, c_white, 1);
                break;
            }
        }
    break;
    
    case m_azul:
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        x = view_xview[0] + view_wview[0];
        y = view_yview[0];
        draw_sprite(d_gui2, 0, x, y);
        draw_text_transformed_colour(x - 285, y + 228, string(round(puntos)), 3, 3, 0,
            c_black, c_black, c_black, c_black, 1);
        if actor == -1
        {
            draw_sprite(d_guicabeza, 12, x - 135, y + 231);
            if revivir != -1
            {
                draw_text_transformed_colour(x - 285, y + 108, string(ceil(revivir / 1000000)),
                    6, 6, 0, c_black, c_black, c_black, c_black, 1);
            }
        }
        else
        {
            switch clase
            {
                case m_mele:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x - 135, y + 231, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_mvida), 1);
                    draw_sprite(d_inguib, 0, x - 533, y + 48);
                    draw_sprite(d_inguib, 0, x - 533, y + 108);
                    draw_sprite(d_inguib, 0, x - 533, y + 168);
                    draw_sprite_ext(d_inguib, 1, x - 533, y + 48, poder[1] / m_mpoder1, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 2, x - 533, y + 108, poder[2] / m_mpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x - 533, y + 168, poder[3] / m_mpoder3, 1, 0, c_white, 1);
                break;
                
                case m_dist:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x - 135, y + 231, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_dvida), 1);
                    draw_sprite(d_inguib, 0, x - 533, y + 78);
                    draw_sprite(d_inguib, 0, x - 533, y + 138);
                    draw_sprite_ext(d_inguib, 2, x - 533, y + 78, poder[2] / m_dpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x - 533, y + 138, poder[3] / m_dpoder3, 1, 0, c_white, 1);
                break;
                
                case m_apoyo:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x - 135, y + 231, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_avida), 1);
                    draw_sprite(d_inguib, 0, x - 533, y + 78);
                    draw_sprite(d_inguib, 0, x - 533, y + 138);
                    draw_sprite_ext(d_inguib, 2, x - 533, y + 78, poder[2] / m_apoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x - 533, y + 138, poder[3] / m_apoder3, 1, 0, c_white, 1);
                break;
            }
        }
    break;
    
    case m_verde:
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        x = view_xview[0];
        y = view_yview[0] + view_hview[0];
        draw_sprite(d_gui3, 0, x, y);
        draw_text_transformed_colour(x + 285, y - 48, string(round(puntos)), 3, 3, 0,
            c_black, c_black, c_black, c_black, 1);
        if actor == -1
        {
            draw_sprite(d_guicabeza, 12, x + 135, y - 39);
            if revivir != -1
            {
                draw_text_transformed_colour(x + 285, y - 168, string(ceil(revivir / 1000000)),
                    6, 6, 0, c_black, c_black, c_black, c_black, 1);
            }
        }
        else
        {
            switch clase
            {
                case m_mele:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x + 135, y - 39, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_mvida), 1);
                    draw_sprite(d_inguib, 0, x + 285, y - 228);
                    draw_sprite(d_inguib, 0, x + 285, y - 168);
                    draw_sprite(d_inguib, 0, x + 285, y - 108);
                    draw_sprite_ext(d_inguib, 1, x + 285, y - 228, poder[1] / m_mpoder1, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 2, x + 285, y - 168, poder[2] / m_mpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x + 285, y - 108, poder[3] / m_mpoder3, 1, 0, c_white, 1);
                break;
                
                case m_dist:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x + 135, y - 39, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_dvida), 1);
                    draw_sprite(d_inguib, 0, x + 285, y - 198);
                    draw_sprite(d_inguib, 0, x + 285, y - 138);
                    draw_sprite_ext(d_inguib, 2, x + 285, y - 198, poder[2] / m_dpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x + 285, y - 138, poder[3] / m_dpoder3, 1, 0, c_white, 1);
                break;
                
                case m_apoyo:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x + 135, y - 39, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_avida), 1);
                    draw_sprite(d_inguib, 0, x + 285, y - 198);
                    draw_sprite(d_inguib, 0, x + 285, y - 138);
                    draw_sprite_ext(d_inguib, 2, x + 285, y - 198, poder[2] / m_apoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x + 285, y - 138, poder[3] / m_apoder3, 1, 0, c_white, 1);
                break;
            }
        }
    break;
    
    case m_amarillo:
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        x = view_xview[0] + view_wview[0];
        y = view_yview[0] + view_hview[0];
        draw_sprite(d_gui4, 0, x, y);
        draw_text_transformed_colour(x - 285, y - 48, string(round(puntos)), 3, 3, 0,
            c_black, c_black, c_black, c_black, 1);
        if actor == -1
        {
            draw_sprite(d_guicabeza, 12, x - 135, y - 39);
            if revivir != -1
            {
                draw_text_transformed_colour(x - 285, y - 168, string(ceil(revivir / 1000000)),
                    6, 6, 0, c_black, c_black, c_black, c_black, 1);
            }
        }
        else
        {
            switch clase
            {
                case m_mele:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x - 135, y - 39, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_mvida), 1);
                    draw_sprite(d_inguib, 0, x - 533, y - 228);
                    draw_sprite(d_inguib, 0, x - 533, y - 168);
                    draw_sprite(d_inguib, 0, x - 533, y - 108);
                    draw_sprite_ext(d_inguib, 1, x - 533, y - 228, poder[1] / m_mpoder1, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 2, x - 533, y - 168, poder[2] / m_mpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x - 533, y - 108, poder[3] / m_mpoder3, 1, 0, c_white, 1);
                break;
                
                case m_dist:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x - 135, y - 39, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_dvida), 1);
                    draw_sprite(d_inguib, 0, x - 533, y - 198);
                    draw_sprite(d_inguib, 0, x - 533, y - 138);
                    draw_sprite_ext(d_inguib, 2, x - 533, y - 198, poder[2] / m_dpoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x - 533, y - 138, poder[3] / m_dpoder3, 1, 0, c_white, 1);
                break;
                
                case m_apoyo:
                    draw_sprite_ext(d_guicabeza, clase * 4 + jugador, x - 135, y - 39, 1, 1, 0,
                        merge_colour(c_dkgray, c_white, vida / m_avida), 1);
                    draw_sprite(d_inguib, 0, x - 533, y - 198);
                    draw_sprite(d_inguib, 0, x - 533, y - 138);
                    draw_sprite_ext(d_inguib, 2, x - 533, y - 198, poder[2] / m_apoder2, 1, 0, c_white, 1);
                    draw_sprite_ext(d_inguib, 3, x - 533, y - 138, poder[3] / m_apoder3, 1, 0, c_white, 1);
                break;
            }
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
