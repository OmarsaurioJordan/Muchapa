<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>d_baseu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oo_enemy</parentName>
  <maskName>d_baseu</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clase = m_pliego;
vida = m_vidapaper;
elite = 1;
calor = 0;
estado = estp_libre;
relojpoder = -irandom(1000000);
poder = false;
reloj_errar = irandom(m_timeerrar * 2);
andar = choose(false, true);
direccion = irandom(359);
municion = 0;
ultimohot = -1;
ultimocold = -1;

blanco = -1;
mma = true;
mxa = x;
mya = y;
mxb = x;
myb = y;
reloj_jug = irandom(1000000);
reloj_proy = irandom(1000000);

anima = 0;
paso = 0;
golperojo = 0;
braza = 0;

fanta1 = -1;
fanta2 = -1;

mp_potential_settings(60, 30, 1, true);
alarm[0] = 1; //cuadrar vida
alarm[1] = 1; //cuadrar municion
depth = -y;

o_game.enemigos++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o_game.enemigos--;
if o_camara.vigilado == id
{
    o_camara.vigilado = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch clase
{
    case m_basura:
        municion = 30 * elite;
    break;
    
    case m_rollo:
        municion = 20 * elite
    break;
    
    case m_folder:
        municion = 10 * elite
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vida = o_game.vidap[clase] * elite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animaciones
anima += delta_time;
if anima &gt;= 100000
{
    anima -= 100000;
    paso++;
    if paso &gt; 3
    {
        paso = 0;
    }
}
if !o_game.pausa
{
    if golperojo != 0
    {
        golperojo = clamp(golperojo - delta_time, 0, 1000000);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///carga poderes y evalua temperatura
if !o_game.pausa
{
    var hielo = 1;
    if calor &lt;= -(o_game.calormax[clase] * elite)
    {
        hielo = 0.3;
    }
    switch clase
    {
        case m_decreto:
            if !poder
            {
                relojpoder += delta_time * elite * hielo;
                if relojpoder &gt;= m_poddecreto
                {
                    relojpoder = -irandom(m_poddecreto * 0.2);
                    poder = true;
                }
            }
        break;
        
        case m_hoja:
            if !poder
            {
                relojpoder += delta_time * elite * hielo;
                if relojpoder &gt;= m_podhoja
                {
                    relojpoder = -irandom(m_podhoja * 0.2);
                    poder = true;
                }
            }
        break;
        
        case m_folder:
            if !poder
            {
                relojpoder += delta_time * hielo;
                if relojpoder &gt;= m_podfolder
                {
                    relojpoder = -irandom(m_podfolder * 0.2);
                    poder = true;
                }
            }
        break;
        
        case m_basura:
            if !poder
            {
                relojpoder += delta_time * elite * hielo;
                if relojpoder &gt;= m_podbasura
                {
                    relojpoder = -irandom(m_podbasura * 0.2);
                    poder = true;
                }
            }
        break;
        
        case m_rollo:
            if !poder
            {
                relojpoder += delta_time * hielo;
                if relojpoder &gt;= m_podrollo
                {
                    relojpoder = -irandom(m_podrollo * 0.2);
                    poder = true;
                }
            }
        break;
        
        case m_avion:
            if !poder
            {
                relojpoder += delta_time * elite * hielo;
                if relojpoder &gt;= m_podavion
                {
                    relojpoder = -irandom(m_podavion * 0.2);
                    poder = true;
                }
            }
        break;
    }
    
    //cambios de temperatura hasta morir o curar
    if calor &gt; 0
    {
        calor = clamp(calor - delta_time * m_velcalor * elite, 0, o_game.vidap[clase] * elite);
        if calor &gt;= o_game.calormax[clase] * elite
        {
            vida = clamp(vida - delta_time * m_velcalor * 2.2, 0, 10000);
            if vida == 0
            {
                if ultimohot != -1
                {
                    ultimohot.puntos += s_puntospaper(clase) * elite;
                }
                s_muertep(id, mu_fire);
            }
            else
            {
                braza -= delta_time;
                if braza &lt;= 0
                {
                    braza = m_golperojo * 3;
                    instance_create(x, y, o_braza);
                }
                
                //calentar a otros
                var miid = id;
                var distt;
                var tempp;
                with o_papel
                {
                    tempp = (miid.calor / (o_game.vidap[miid.clase] * miid.elite)) * (o_game.vidap[clase] * elite);
                    if calor &lt; tempp
                    {
                        distt = point_distance(x, y, miid.x, miid.y);
                        if distt &lt; m_maxfoco and
                            !collision_line(x, y, miid.x, miid.y, oo_bloque, true, true)
                        {
                            ultimohot = miid.ultimohot;
                            calor = clamp(calor + delta_time * m_velcalor * (1 + distt / m_maxfoco), -10000, tempp);
                        }
                    }
                }
            }
        }
    }
    else if calor &lt; 0
    {
        calor = clamp(calor + delta_time * m_velcalor * elite, -o_game.vidap[clase] * elite, 0);
        if calor &lt;= -(o_game.calormax[clase] * elite)
        {
            vida = clamp(vida - delta_time * m_velcalor, 0, 10000);
            if vida == 0
            {
                if ultimocold != -1
                {
                    ultimocold.puntos += s_puntospaper(clase) * elite;
                    s_puntospoder(ultimocold, s_puntospaper(clase) * elite);
                }
                s_muertep(id, mu_water);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IA
if !o_game.pausa
{
    var hielo = 1;
    if calor &lt;= -(o_game.calormax[clase] * elite)
    {
        hielo = 0.8;
    }
    if o_game.reloj_hielo != 0
    {
        hielo = 0;
    }
    
    //cambios movimiento errar
    reloj_errar -= delta_time;
    if reloj_errar &lt;= 0
    {
        reloj_errar = m_timeerrar + irandom(m_timeerrar);
        if andar
        {
            andar = choose(true, true, false);
            direccion += -45 + irandom(90);
        }
        else
        {
            andar = choose(false, false, false, true);
            direccion = irandom(359);
            if andar
            {
                s_buscameta(id);
            }
        }
    }
    
    //poderes de los diferentes papeles
    if poder and (hielo != 0 or clase == m_basura) { switch clase
    {
        case m_decreto:
            if point_distance(x, y, o_camara.x, o_camara.y) &lt;= m_vision * 2
            {
                var aux = instance_create(x, y, o_decreto);
                aux.vida = vida;
                aux.elite = elite;
                audio_play_sound_at(a_teleporta, x, y, 0, ma_ref, ma_max, ma_fac, false, 45);
                instance_destroy();
            }
        break;
        
        case m_hoja:
            if fanta1 == -1 and fanta2 == -1 and estado == estp_persigue and
                point_distance(x, y, mxa, mya) &lt;= m_vision * 0.75
            {
                poder = false;
                fanta1 = instance_create(x, y, o_fantasma);
                fanta1.invocador = id;
                fanta1.elite = elite;
                fanta1.estado = estado;
                fanta1.blanco = blanco;
                fanta1.mxa = mxa;
                fanta1.mya = mya;
                fanta2 = instance_create(x, y, o_fantasma);
                fanta2.invocador = id;
                fanta2.elite = elite;
                fanta2.estado = estado;
                fanta2.blanco = blanco;
                fanta2.mxa = mxa;
                fanta2.mya = mya;
            }
        break;
        
        case m_folder:
            if estado == estp_persigue and !collision_line(x, y, mxa, mya, oo_enemy, true, true) and
                point_distance(x, y, mxa, mya) &lt;= m_vision
            {
                poder = false;
                var aux = instance_create(x, y, o_papel);
                aux.clase = m_carta;
                aux.estado = estp_corre;
                aux.elite = elite;
                aux.calor = (calor / o_game.vidap[clase]) * o_game.vidap[m_carta];
                aux.ultimohot = ultimohot;
                aux.ultimocold = ultimocold;
                var ddd = point_direction(x, y, mxa, mya) - 10 + irandom(20);
                aux.mxa = x + lengthdir_x(10000, ddd);
                aux.mya = y + lengthdir_y(10000, ddd);
                aux.mxb = x;
                aux.myb = y;
                audio_play_sound_at(a_newcarta, x, y, 0, ma_ref, ma_max, ma_fac, false, 25);
                
                municion--;
                if municion &lt;= 0
                {
                    instance_destroy();
                }
            }
        break;
        
        case m_basura:
            if estado == estp_persigue and !collision_line(x, y, mxa, mya, oo_enemy, true, true) and
                point_distance(x, y, mxa, mya) &lt;= m_vision
            {
                poder = false;
                var aux = instance_create(x, y, o_bolita);
                aux.elite = elite;
                aux.direccion = point_direction(x, y, mxa, mya) - 10 + irandom(20);
                if calor &gt;= o_game.calormax[clase] * elite
                {
                    aux.color = c_gray;
                }
                else if calor &lt;= -(o_game.calormax[clase] * elite)
                {
                    aux.color = c_miazul;
                }
                audio_play_sound_at(a_bolita, x, y, 0, ma_ref, ma_max, ma_fac, false, 15);
                
                municion--;
                if municion &lt;= 0
                {
                    instance_destroy();
                }
            }
        break;
        
        case m_rollo:
            if estado == estp_persigue and !collision_line(x, y, mxa, mya, oo_enemy, true, true) and
                point_distance(x, y, mxa, mya) &lt;= m_vision * 0.75
            {
                poder = false;
                var aux = instance_create(x, y, o_papel);
                aux.clase = m_pliego;
                aux.elite = elite;
                aux.estado = estado;
                aux.blanco = blanco;
                aux.mxa = mxa;
                aux.mya = mya;
                aux.calor = (calor / o_game.vidap[clase]) * o_game.vidap[m_pliego];
                aux.ultimohot = ultimohot;
                aux.ultimocold = ultimocold;
                audio_play_sound_at(a_newpliego, x, y, 0, ma_ref, ma_max, ma_fac, false, 25);
                
                municion--;
                if municion &lt;= 0
                {
                    instance_destroy();
                }
            }
        break;
        
        case m_avion:
            if direccion &lt;= 90 and direccion &gt;= 0
            {
                var aux = instance_create(x, y, o_avion);
                aux.vida = vida;
                aux.calor = calor;
                aux.elite = elite;
                aux.ultimocold = ultimocold;
                aux.ultimohot = ultimohot;
                audio_play_sound_at(a_avion, x, y, 0, ma_ref, ma_max, ma_fac, false, 45);
                instance_destroy();
            }
        break;
    }}
    
    //colision con muros
    var ai = true;
    var otro = instance_place(x, y, oo_bloque);
    if otro != noone
    {
        direction = point_direction(otro.x, otro.y, x, y);
        x += lengthdir_x(delta_time * m_velrebote, direction);
        y += lengthdir_y(delta_time * m_velrebote, direction);
        direccion = irandom(359);
        s_buscajugador(id, 1000000);
        ai = false;
    }
    else
    {
        //colision con otros tipos
        otro = instance_place(x, y, o_player);
        if otro == noone
        {
            otro = instance_place(x, y, oo_enemy);
        }
        if otro != noone
        {
            direction = point_direction(otro.x, otro.y, x, y);
            x += lengthdir_x(delta_time * m_velrebote, direction);
            y += lengthdir_y(delta_time * m_velrebote, direction);
        }
        
        //alejarse del fuego
        otro = collision_circle(x, y, m_hullefuego, o_antorcha, true, true);
        if otro != noone and hielo != 0
        {
            otro = instance_nearest(x, y, o_antorcha);
            if !collision_line(x, y, otro.x, otro.y, oo_bloque, true, true)
            {
                direction = point_direction(otro.x, otro.y, x, y);
                x += lengthdir_x(delta_time * o_game.velpaper[clase] * 0.5, direction);
                y += lengthdir_y(delta_time * o_game.velpaper[clase] * 0.5, direction);
                estado = estp_libre;
                ai = false;
                
                //calentarse
                var distt = 1 - clamp(point_distance(x, y, otro.x, otro.y) / m_hullefuego, 0, 1);
                ultimohot = otro.origen;
                calor = clamp(calor + delta_time * distt * m_velcalor * 21, -10000, o_game.vidap[clase] * elite);
            }
        }
        
        //alejarse del poder de gran escudo
        otro = collision_circle(x, y, m_escudisimo, o_escudo, true, true);
        if otro != noone
        {
            direction = point_direction(otro.x, otro.y, x, y);
            x += lengthdir_x(delta_time * m_velrebote, direction);
            y += lengthdir_y(delta_time * m_velrebote, direction);
            direccion = irandom(359);
            s_buscajugador(id, 1000000);
            ai = false;
        }
    }
    
    //IA estados
    if ai and golperojo == 0 { switch estado
    {
        case estp_libre:
            if andar
            {
                x += lengthdir_x(delta_time * o_game.velpaper[clase] * hielo, direccion);
                y += lengthdir_y(delta_time * o_game.velpaper[clase] * hielo, direccion);
            }
            s_buscajugador(id, 1000000);
            if estado == estp_libre
            {
                s_buscaproyectil(id, 4000000);
            }
        break;
        
        case estp_persigue:
            if instance_exists(blanco)
            {
                if point_distance(x, y, blanco.x, blanco.y) &gt; m_vision * elite
                    or collision_line(x, y, blanco.x, blanco.y, oo_bloque, true, true)
                {
                    estado = estp_rastrea;
                }
                else
                {
                    mxa = blanco.x;
                    mya = blanco.y;
                    if clase == m_folder or clase == m_rollo or clase == m_basura
                    {
                        if point_distance(x, y, mxa, mya) &lt;= m_vision * 0.25
                        {
                            if frac(direccion * 0.5) == 0
                            {
                                direction = point_direction(mxa, mya, x, y) + irandom(60);
                            }
                            else
                            {
                                direction = point_direction(mxa, mya, x, y) - irandom(60);
                            }
                            x += lengthdir_x(delta_time * o_game.velpaper[clase] * hielo, direction);
                            y += lengthdir_y(delta_time * o_game.velpaper[clase] * hielo, direction);
                        }
                        else if point_distance(x, y, mxa, mya) &gt;= m_vision * 0.5
                        {
                            mp_potential_step_object(mxa, mya, delta_time * o_game.velpaper[clase] * hielo, oo_bloque);
                        }
                        else if andar
                        {
                            x += lengthdir_x(delta_time * o_game.velpaper[clase] * hielo, direccion);
                            y += lengthdir_y(delta_time * o_game.velpaper[clase] * hielo, direccion);
                        }
                    }
                    else
                    {
                        mp_potential_step_object(mxa, mya, delta_time * o_game.velpaper[clase] * hielo, oo_bloque);
                    }
                }
            }
            else
            {
                estado = estp_libre;
            }
            s_buscajugador(id, 3000000);
        break;
        
        case estp_rastrea:
            if point_distance(mxa, mya, x, y) &gt; 64 and
                !collision_line(x, y, mxa, mya, oo_bloque, true, true)
            {
                mp_potential_step_object(mxa, mya, delta_time * o_game.velpaper[clase] * hielo, oo_bloque);
            }
            else
            {
                estado = estp_libre;
            }
            s_buscajugador(id, 500000);
        break;
        
        case estp_investiga:
            if mma
            {
                if point_distance(mxa, mya, x, y) &gt; 64 and
                    !collision_line(x, y, mxa, mya, oo_bloque, true, true)
                {
                    mp_potential_step_object(mxa, mya, delta_time * o_game.velpaper[clase] * hielo, oo_bloque);
                }
                else
                {
                    mma = false;
                }
            }
            else
            {
                if point_distance(mxb, myb, x, y) &gt; 64 and
                    !collision_line(x, y, mxa, mya, oo_bloque, true, true)
                {
                    mp_potential_step_object(mxb, myb, delta_time * o_game.velpaper[clase] * hielo, oo_bloque);
                }
                else
                {
                    estado = estp_libre;
                }
            }
            s_buscajugador(id, 500000);
        break;
        
        case estp_corre:
            if point_distance(mxb, myb, x, y) &gt; m_vision * 2
            {
                estado = estp_libre;
            }
            else
            {
                direction = point_direction(x, y, mxa, mya);
                x += lengthdir_x(delta_time * o_game.velpaper[clase] * 2.5 * hielo, direction);
                y += lengthdir_y(delta_time * o_game.velpaper[clase] * 2.5 * hielo, direction);
                if place_meeting(x, y, oo_bloque)
                {
                    estado = estp_libre;
                }
                else if x &lt;= 144 or x &gt;= room_width - 144 or
                    y &lt;= 432 or y &gt;= room_height - 144
                {
                    estado = estp_libre;
                }
            }
        break;
    }}
    
    //limites mundo y profundidad dibujado
    var xvi = x;
    var yvi = y;
    x = clamp(x, 144, room_width - 144);
    y = clamp(y, 432, room_height - 144);
    if x != xvi or y != yvi
    {
        direccion = irandom(359);
    }
    depth = -y;
    
    //colision con agua
    otro = instance_place(x, y, o_agua);
    if otro != noone
    {
        ultimocold = otro.origen;
        if otro.hiper
        {
            calor = -(o_game.vidap[clase] * elite);
        }
        else
        {
            calor = clamp(calor - m_mojarproy, -(o_game.vidap[clase] * elite), 10000);
        }
        if calor &lt;= -(o_game.calormax[clase] * elite)
        {
            vida = clamp(vida - m_cuchillazo * 0.1, 0, 10000);
            if vida == 0
            {
                otro.origen.puntos += s_puntospaper(clase) * elite;
                s_puntospoder(otro.origen, s_puntospaper(clase) * elite);
            }
        }
        with otro
        {
            instance_destroy();
        }
        if vida == 0
        {
            s_muertep(id, mu_water);
        }
    }
    
    //colision con cuchilla
    otro = instance_place(x, y, o_cuchilla);
    if otro != noone
    {
        if otro.sniper == 1
        {
            vida = clamp(vida - m_cuchillazo, 0, 10000);
        }
        else
        {
            vida = clamp(vida - m_cuchillazo * 2, 0, 10000);
        }
        if vida == 0
        {
            if otro.origen != -1
            {
                otro.origen.puntos += s_puntospaper(clase) * elite;
                s_puntospoder(otro.origen, s_puntospaper(clase) * elite);
            }
        }
        else
        {
            audio_play_sound_at(a_impacto, x, y, 0, ma_ref, ma_max, ma_fac, false, 10);
            golperojo = m_golperojo;
        }
        with otro
        {
            instance_destroy();
        }
        if vida == 0
        {
            s_muertep(id, mu_dist);
        }
    }
    
    //colision con tijeras
    otro = instance_place(x, y, o_tijerasgo);
    if otro != noone
    {
        otro.origen.puntos += s_puntospaper(clase) * elite;
        s_muertep(id, mu_mele);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_sombra, 0, x, y);

var ccc = c_white;
if golperojo != 0
{
    ccc = c_mirojo;
}
else if calor &gt;= o_game.calormax[clase] * elite
{
    ccc = c_gray;
}
else if calor &lt;= -(o_game.calormax[clase] * elite)
{
    ccc = c_miazul;
}

if elite != 1
{
    draw_sprite_ext(d_elite, clase, x, y - 67, 1, 1, 0, c_white, 1);
}

//pies
if o_game.reloj_hielo != 0
{
    draw_sprite_ext(d_patas, clase * 6 + 5, x, y, 1, 1, 0, ccc, 1);
}
else if xprevious == x and yprevious == y
{
    draw_sprite_ext(d_patas, clase * 6, x, y, 1, 1, 0, ccc, 1);
}
else
{
    draw_sprite_ext(d_patas, clase * 6 + 1 + paso, x, y, 1, 1, 0, ccc, 1);
}

//cuerpo
draw_sprite_ext(d_papel, clase, x, y - 67, 1, 1, 0, ccc, 1);


//dibujar vida y calor
if o_game.displei &gt;= 2
{
    draw_rectangle_colour(x - 48, y - 240, x + 48, y - 250,
        c_purple, c_purple, c_purple, c_purple, false);
    draw_rectangle_colour(x - 48, y - 240, x - 48 + (vida / (o_game.vidap[clase] * elite)) * 96, y - 250,
        c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false);
}
if o_game.displei == 3
{
    ccc = merge_colour(c_white, c_black, clamp((calor + o_game.vidap[clase] * elite) / (o_game.vidap[clase] * elite * 2), 0, 1));
    draw_rectangle_colour(x - 32, y - 230, x + 32, y - 240, ccc, ccc, ccc, ccc, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
